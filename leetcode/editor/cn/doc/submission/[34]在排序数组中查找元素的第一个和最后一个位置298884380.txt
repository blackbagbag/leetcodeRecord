class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length == 0){
             return new int[]{-1, -1};
        }

        if(target < nums[0] || target > nums[nums.length-1]){
            return new int[]{-1, -1};
        }

        int left = searchLeftbound(nums, target) + 1;
        int right = searchRightbound(nums,target) -1;
        if (left <= right){
            return new int[]{left, right};
        }
        return new int[]{-1, -1};
    }
        public int searchRightbound (int[] nums, int target){
            int left = 0, right = nums.length-1, initRight = -2;
            while(left <= right){
                int mid = (left + right)/2;
                if(nums[mid] > target){
                    right = mid -1;
                }else {
                    left = mid +1;
                    initRight = left;
                }
            }
            return initRight;
        }

        public int searchLeftbound (int[] nums, int target){
            int left = 0, right = nums.length-1;
            while(left <= right){
                int mid = (left + right)/2;
                if(nums[mid] < target){
                    left = left +1;
                }else {
                    right = mid - 1;
                }
            }
            return right;
        }
}
//runtime:0 ms
//memory:44.6 MB
