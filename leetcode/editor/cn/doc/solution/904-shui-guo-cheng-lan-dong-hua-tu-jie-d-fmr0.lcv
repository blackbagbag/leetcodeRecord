[刷题视频合集](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)

[刷题笔记](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)

#### [904. 水果成篮](https://leetcode-cn.com/problems/fruit-into-baskets/) (medium)

![...eetcode_904.水果成篮.mov](https://leetcode.cn/problems/fruit-into-baskets/solution/904-shui-guo-cheng-lan-dong-hua-tu-jie-d-fmr0/b2521e96-be4e-4aa3-9f38-9a276543f59e)

[动画过大，点击查看](https://xiaochen1024.com/20211118151546.gif)
![904.m4v](https://leetcode.cn/problems/fruit-into-baskets/solution/904-shui-guo-cheng-lan-dong-hua-tu-jie-d-fmr0/b4f352da-ab28-401e-a932-7fc9d51f3d34)

- 思路：用滑动窗口遍历fruits，当有新种类的水果进入窗口时
  1. 如果窗口中只有一种水果，将这种水果加入arr数组
  2. 如果有两种水果，更新窗口的左边界，更新arr中水果的种类
  3. 如果进来了一种新的类型的水果 更新前一种水果的位置
  4. 更新滑动窗口的最大值
- 复杂度：时间复杂度`O(n)`，空间复杂度`O(1)`。

js：

* js

```js
//[1,1,2,2]
//[1,1,2,2,3] -> [2,2,3]
var totalFruit = function(fruits) {
    let l = 0;//起始指针
    let maxLen = 0;//窗口的最大长度 其中最多包涵两种水果
    let n = 0//前一类水果的结束位置
    let arr = [fruits[l]]//水果的种类数组

    for(let r = 0; r < fruits.length; r++){//窗口的右指针不断前进
        if(!arr.includes(fruits[r])){//如果窗口中不包含 进窗口的水果
            if(arr.length <= 1){//如果只有一种水果
                arr[1] = fruits[r]//将这种水果加入arr数组
            }else{//如果有两种水果
                l = n//更新窗口的左边界
                arr[0] = fruits[r-1]//更新arr中水果的种类
                arr[1] = fruits[r]
            }
        }
       
        if(fruits[r] !== fruits[n]){//如果进来了一种新的类型的水果 更新前一种水果的位置
            n = r
        }

        maxLen = Math.max(maxLen,r-l+1)//更新滑动窗口的最大值
    }
    return maxLen

};

```

java：

* java

```java
class Solution {
    public int totalFruit(int[] tree) {
        if (tree == null || tree.length == 0) return 0;
        int n = tree.length;

        Map<Integer, Integer> map = new HashMap<>();
        int maxLen = 0, left = 0;
        for (int i = 0; i < n; i++) {
            map.put(tree[i], map.getOrDefault(tree[i], 0) + 1); 
            while (map.size() > 2) { 
                map.put(tree[left], map.get(tree[left]) - 1);
                if (map.get(tree[left]) == 0) map.remove(tree[left]); 
                left++;
            }
            maxLen = Math.max(maxLen, i - left + 1);
        }
        return maxLen;
    }
}

```

